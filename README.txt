Это руководсво по классу date.
Создатель: Артемий Морозов
Телеграмм: @tokreal

Класс работает лишь с С++ (работает на версии ISO 14 и выше)
Требования к запуску примера: 
Windows 10, путь к g++ в переменной среды (d:\Mingw\bin).
Пример компиляции описан в example\build.bat 
(можно использовать в качестве компиляции примера, однако запускать следует из директории example\)

Данный класс создан для удобной работы с датами.
Работает с датами: от 01.01.0001 до 31.12.9999

У класса есть множетсво конструкторов.

date (string); (в качестве строки должна передаваться дата формата "ДД.ММ.ГГГГ")
date (string*); (аналогично, только передается указатель)
date (int, int, int); (передаются 3 числа: день, месяц, год соответсвенно)
date (date); (конструктор копирования)
date (vector<int>); (вектор чисел, состоящий из дня, месяца, года соответсвенно)
date ("ДД.ММ.ГГГГ");
date (int); (на вход подается уникальное число, соответствующий аргумент ф-ции f(x))
	f(x) = дата

	f(x) определена на промежутке [0, 3652134]

есть несколько функций получения даты (далее o - объект класса)

o.getDate(string&); (вернет строку, в которой будет дата, по ссылке)
o.getDate(); (вернет строку с датой)

Так же у класса предусмотрены функции, способные задать дату

o.setDateLocal(); (задает сегодняшнуюю дату)
o.setDate(string*); (задает дату по указателю на строку с датой)
o.setDate(string); (задает дату по строке с датой)

для класса переопределены инкременты и декременты, их свойства идентичны 
стандартным инкрементам и декрементам, возвращают объект класса

o++;
o--;
--o;
++o;

переопределен оператор присваивания
объекта можно приравнять к строке с датой, ко множеству из трех чисел, к другом объекту, к  уникальному числу f(x) (описана выше)

o = string("01.01.0001");
o = "01.01.0001";
o = {1, 1, 1}; (здесь присваивание происходит анологично конструктору date(int, int, int))
o1 = o2; (здесь o1 и o2 - разные объекты, хотя запись o = o; так же допускается).

для удобного поиска ошибки, в классе сущетсвует режим дебага
режим дебага можно включить для одного объекта

o.useDebug(true); (ф-ция принимает bool)

в этом случае дебаг будет включен для объекта.

так же, при записи o1 = o2;
	1. Если дебаг был включен у объекта o2, он включится у объекта o1.
	2. Если дебаг был включен у объекта o1, а у объекта o2 был выключен, 
			у объекта o1 сохранится режим дебага. Так же дебаг не включится у объекта o2.
	3. Если дебаг был выключен у обоих объектов, он останется выключеным у обоих.
	
Дебаг можно включить для всех объектов класса date. Для этого можно воспользоваться ф-цией:

_date_set_all_debug(true); (принимает bool)

Когда у объекта включен режим дебага, в стандартный поток вывода будет выводится информация об ошибках.

Режим дебага можно выключить у объекта.

o.useDebug(false);

Так же можно выключить дебаг у всех объектов:
_date_set_all_debug(false);
Однако, если у объекта до применения этой ф-ции был включен дебаг ф-цией o.useDebug(true);
режим дебага останется включенным у объекта. Так же остенется включенным дебаг у объектов, приобетших 
режим дебага через присваинвание у других объектов.

Если выключить дебаг у объекта, но оставить дебаг у всех объектов:

o.useDebug(false);
_date_set_all_debug(true);
Дебаг будет работать для объекта.

В классе предусмотренны некоторые ф-ции для получения информации об объекте.

o.getDebugUse(); (возвращает bool, находится ли объект в режиме дебага) 
	!здесь имеется в виду информация про именно этот объект, если дебаг включен для всех объектов 
		(функцией _date_set_all_debug), 
		дебаг будет производится в не зависимости от того, включен ли дебаг у объекта!

o.getExist(); (возвращает bool, существует ли дата у объекта)
o.getDay(); (возвращает день в виде int)
o.getMonth(); (возвращает месяц в виде int)
o.getYear(); (возвращает год в виде int)
o.getDayOfWeek(); (возвращает день недели в виде string)

o.clear(); (удаляет дату из объекта)

Для класса переопределенны некоторые операторы присваивания

int(o) (вернет число f(x), соответсвующий дате объекта)
string(o) (вернет дату объекта в виде строки)		
vector<int>(o) (вернет вектор int из 3 чисел, дня, месяца, года соответсвенно для даты объекта)

Переопределены оператор сравнения:
==, !=, >, <, >=, <=

Важно, что если дата не существует у обоих объектов, они считаются равными, однако если дата существует у одного, то считается большим тот объект, у которого существует дата.

ВАЖНО! Не допускается подобная запись:
o = date({1, 1, 1}); 
или date o({1, 1, 1});

вместо этого можно указать явно:
o = date(vector<int>{1, 1, 1}); 
или 
o = {1, 1, 1};

